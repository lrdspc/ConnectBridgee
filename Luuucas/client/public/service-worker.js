importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js');

// Set workbox config
workbox.setConfig({
  debug: false
});

const { registerRoute } = workbox.routing;
const { CacheFirst, NetworkFirst, StaleWhileRevalidate } = workbox.strategies;
const { ExpirationPlugin } = workbox.expiration;
const { precacheAndRoute, createHandlerBoundToURL } = workbox.precaching;
const { BackgroundSyncPlugin } = workbox.backgroundSync;

// Precache all of the assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST || []);

// Cache the page shell (index.html)
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages-cache',
    plugins: [
      new workbox.expiration.ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      })
    ]
  })
);

// Cache CSS and JavaScript
registerRoute(
  ({ request }) => 
    request.destination === 'style' ||
    request.destination === 'script',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60 // 24 hours
      })
    ]
  })
);

// Cache images
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      })
    ]
  })
);

// Cache Google Fonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com' || 
               url.origin === 'https://fonts.gstatic.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 20,
        maxAgeSeconds: 365 * 24 * 60 * 60, // 1 year
      })
    ]
  })
);

// Cache API responses
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      })
    ]
  })
);

// Background sync for offline visits data
const bgSyncPlugin = new BackgroundSyncPlugin('visits-sync-queue', {
  maxRetentionTime: 24 * 60 // Retry for up to 24 hours
});

// Register route for syncing visit data
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/visits'),
  new NetworkFirst({
    plugins: [bgSyncPlugin],
    networkTimeoutSeconds: 10
  }),
  'POST'
);

// Handle when app goes back online
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-visits') {
    event.waitUntil(syncVisits());
  }
});

async function syncVisits() {
  try {
    // Notify all clients that sync is happening
    const clients = await self.clients.matchAll();
    for (const client of clients) {
      client.postMessage({
        type: 'SYNC_STARTED'
      });
    }

    // Wait a moment to allow app to process sync notification
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Sync complete notification
    for (const client of clients) {
      client.postMessage({
        type: 'SYNC_COMPLETED'
      });
    }
    
    return true;
  } catch (error) {
    console.error('Error during background sync:', error);
    return false;
  }
}

// Listen for app sending offline indicator
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'CHECK_ONLINE_STATUS') {
    const isOnline = self.navigator.onLine;
    event.ports[0].postMessage({
      isOnline
    });
  }
});

// Install and activate event handlers for faster PWA setup
self.addEventListener('install', (event) => {
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  event.waitUntil(self.clients.claim());
});
