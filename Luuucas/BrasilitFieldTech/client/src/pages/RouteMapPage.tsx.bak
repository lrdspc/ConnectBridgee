import { useState, useEffect, useMemo } from 'react';
import { useVisits } from '../hooks/useVisits';
import useGeolocation from '../hooks/useGeolocation';
import { gerarLinkGoogleMaps, gerarLinkWaze, gerarRotaCompletaGoogleMaps } from '../lib/geocoding';
import { getVisitsWithCoordinates, optimizeRoute, VisitWithCoordinates, Coordinate, geocodeAddress } from '../lib/geocoding';
import RouteMap from '../components/maps/RouteMap'; // Usando o RouteMap otimizado
import Header from '../components/layout/Header';
import { PageTransition } from '@/components/ui/loading-animation';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogTrigger, DialogDescription } from '@/components/ui/dialog';
import { MapPin, Navigation, RotateCw, Clock, Calendar, Database, Edit, MapIcon, ArrowRight, X } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Link } from 'wouter';
import { Visit, db, initializeDevDatabase } from '../lib/db';
import { useIsMobile } from '@/hooks/use-mobile';

// Importar CSS para estabilidade do mapa
import '../styles/map.css';

const RouteMapPage = () => {
  // Estados
  const [selectedVisitId, setSelectedVisitId] = useState<string | null>(null);
  const [visitsWithCoordinates, setVisitsWithCoordinates] = useState<VisitWithCoordinates[]>([]);
  const [optimizedVisits, setOptimizedVisits] = useState<VisitWithCoordinates[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showOptimizedRoute, setShowOptimizedRoute] = useState(false);
  const [activeTab, setActiveTab] = useState('mapa');
  const [customStartLocation, setCustomStartLocation] = useState<Coordinate | null>(null);
  const [customLocationAddress, setCustomLocationAddress] = useState("");
  const [showLocationDialog, setShowLocationDialog] = useState(false);
  const [tempLocationAddress, setTempLocationAddress] = useState("");
  const [isSearchingLocation, setIsSearchingLocation] = useState(false);
  
  // Hooks
  const { visits, isLoading: visitsLoading } = useVisits('scheduled');
  const { position: currentGpsLocation, error: locationError, loading: locationLoading } = useGeolocation({ 
    watchPosition: true,
    throttleInterval: 3000, // Evitar piscadas no GPS - atualizar a cada 3 segundos
    enableHighAccuracy: true
  });
  const { toast } = useToast();
  
  // Localização efetiva (GPS ou personalizada)
  const currentLocation = customStartLocation || currentGpsLocation;
  
  // Efeito para carregar as coordenadas das visitas
  useEffect(() => {
    const loadVisitsWithCoordinates = async () => {
      if (!visitsLoading && visits) {
        setIsLoading(true);
        try {
          // Filtrar visitas apenas do tipo 'scheduled' e 'in-progress'
          const activeVisits = visits.filter(
            v => v.status === 'scheduled' || v.status === 'in-progress'
          );
          
          console.time('Geocoding');
          // Obter coordenadas para cada visita (agora com cache)
          const withCoordinates = await getVisitsWithCoordinates(activeVisits);
          console.timeEnd('Geocoding');
          
          setVisitsWithCoordinates(withCoordinates);
          
          // Somente recalcular a rota otimizada se tivermos o local atual
          // e se tivermos novas visitas ou uma nova localização
          if (currentLocation) {
            console.time('RouteOptimization');
            const optimized = optimizeRoute(withCoordinates, currentLocation);
            console.timeEnd('RouteOptimization');
            setOptimizedVisits(optimized);
          } else {
            setOptimizedVisits(withCoordinates);
          }
        } catch (error) {
          console.error('Erro ao carregar coordenadas das visitas:', error);
          toast({
            title: 'Erro ao carregar rotas',
            description: 'Não foi possível carregar as coordenadas para algumas visitas.',
            variant: 'destructive'
          });
        } finally {
          setIsLoading(false);
        }
      }
    };
    
    loadVisitsWithCoordinates();
  }, [visits, visitsLoading, currentLocation]);
  
  // Função para processar o endereço personalizado
  const handleCustomLocationSearch = async () => {
    if (!tempLocationAddress.trim()) {
      toast({
        title: 'Endereço vazio',
        description: 'Por favor, digite um endereço válido.',
        variant: 'destructive'
      });
      return;
    }
    
    setIsSearchingLocation(true);
    try {
      const coordinates = await geocodeAddress(tempLocationAddress);
      if (coordinates) {
        setCustomStartLocation(coordinates);
        setCustomLocationAddress(tempLocationAddress);
        setShowLocationDialog(false);
        
        toast({
          title: 'Localização definida',
          description: 'A rota será calculada com base na localização personalizada.',
        });
        
        // Recalcular rotas com a nova localização
        const optimized = optimizeRoute(visitsWithCoordinates, coordinates);
        setOptimizedVisits(optimized);
        setShowOptimizedRoute(true);
      } else {
        toast({
          title: 'Endereço não encontrado',
          description: 'Não foi possível encontrar coordenadas para este endereço.',
          variant: 'destructive'
        });
      }
    } catch (error) {
      console.error('Erro ao buscar coordenadas:', error);
      toast({
        title: 'Erro ao processar endereço',
        description: 'Houve um problema ao buscar as coordenadas. Tente novamente.',
        variant: 'destructive'
      });
    } finally {
      setIsSearchingLocation(false);
    }
  };
  
  // Função para usar a localização atual do GPS
  const handleUseCurrentLocation = () => {
    if (currentGpsLocation) {
      setCustomStartLocation(null);
      setCustomLocationAddress("");
      toast({
        title: 'Usando GPS',
        description: 'Voltando a usar sua localização atual do GPS.',
      });
      
      // Recalcular rotas com a localização atual
      const optimized = optimizeRoute(visitsWithCoordinates, currentGpsLocation);
      setOptimizedVisits(optimized);
      setShowOptimizedRoute(true);
    } else {
      toast({
        title: 'GPS indisponível',
        description: 'Não foi possível obter sua localização atual. Verifique as permissões.',
        variant: 'destructive'
      });
    }
  };
  
  // Função para recalcular rotas
  const handleRecalculateRoutes = async () => {
    if (!currentLocation) {
      toast({
        title: 'Localização não disponível',
        description: 'Não foi possível obter sua localização atual. Verifique as permissões.',
        variant: 'destructive'
      });
      return;
    }
    
    setIsLoading(true);
    try {
      const optimized = optimizeRoute(visitsWithCoordinates, currentLocation);
      setOptimizedVisits(optimized);
      setShowOptimizedRoute(true);
      
      toast({
        title: 'Rotas recalculadas',
        description: 'Rota otimizada foi recalculada com base na sua localização atual.',
      });
    } catch (error) {
      console.error('Erro ao recalcular rotas:', error);
      toast({
        title: 'Erro ao recalcular',
        description: 'Não foi possível recalcular as rotas. Tente novamente.',
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };
  
  // Mapear visitas para dados a serem exibidos no mapa
  const mapVisits = showOptimizedRoute ? optimizedVisits : visitsWithCoordinates;
  
  // Obter a visita selecionada
  const selectedVisit = selectedVisitId 
    ? mapVisits.find(v => v.id === selectedVisitId) 
    : null;
  
  // Dados para o componente do mapa
  const mapData = mapVisits.map(visit => ({
    id: visit.id,
    clientName: visit.clientName,
    address: visit.address,
    coordinates: visit.coordinates
  }));
  
  // Função para formatar tempo estimado
  const formatTimeEstimate = (visit: VisitWithCoordinates, index: number): string => {
    if (!currentLocation || index === 0) return 'Próxima visita';
    
    // Calcular tempo estimado baseado na distância (1 km ~= 2 minutos dirigindo)
    const prevVisit = optimizedVisits[index - 1];
    const prevCoordinates = index === 1 ? currentLocation : prevVisit.coordinates;
    
    // Usando a função de distância da nossa lib de geocodificação
    const distance = getDistanceBetweenCoordinates(prevCoordinates, visit.coordinates);
    const timeInMinutes = Math.round(distance * 2);
    
    if (timeInMinutes < 60) {
      return `~${timeInMinutes} min`;
    } else {
      const hours = Math.floor(timeInMinutes / 60);
      const mins = timeInMinutes % 60;
      return `~${hours}h ${mins}min`;
    }
  };
  
  // Função auxiliar para calcular distância
  const getDistanceBetweenCoordinates = (coord1: Coordinate, coord2: Coordinate): number => {
    // Usar a fórmula de Haversine para calcular distância entre coordenadas
    const R = 6371; // Raio da Terra em km
    const dLat = deg2rad(coord2.lat - coord1.lat);
    const dLon = deg2rad(coord2.lng - coord1.lng);
    
    const a = 
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(deg2rad(coord1.lat)) * Math.cos(deg2rad(coord2.lat)) * 
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // Distância em km
    
    return distance;
  };
  
  const deg2rad = (deg: number): number => {
    return deg * (Math.PI / 180);
  };
  
  // Detectar se é versão desktop ou mobile para layout responsivo
  const isMobile = useIsMobile();
  
  return (
    <PageTransition>
      <div className={`page min-h-screen bg-gray-50 ${isMobile ? 'flex flex-col' : ''}`}>
        <Header 
          title="Rotas Inteligentes" 
          showBackButton={true}
        />
        
        {/* Layout totalmente diferente para desktop e mobile */}
        {isMobile ? (
          // MOBILE LAYOUT (original)
          <div className="p-4 bg-white border-b">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-2 ${currentLocation ? 'bg-green-500' : 'bg-amber-500'}`}></div>
                <span className="text-sm">
                  {locationLoading && !customStartLocation
                    ? 'Obtendo localização...' 
                    : currentLocation 
                      ? customStartLocation 
                        ? 'Localização personalizada' 
                        : 'GPS conectado' 
                      : 'GPS indisponível'}
                </span>
              </div>
            
            <div className="flex space-x-2">
              <Dialog open={showLocationDialog} onOpenChange={(open) => {
                if (open && customLocationAddress) {
                  setTempLocationAddress(customLocationAddress);
                }
                setShowLocationDialog(open);
              }}>
                <DialogTrigger asChild>
                  <Button 
                    variant="outline" 
                    size="sm"
                    className="text-xs"
                  >
                    <Edit className="w-3 h-3 mr-1" /> 
                    {customStartLocation ? 'Editar ponto inicial' : 'Definir ponto inicial'}
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-md">
                  <DialogHeader>
                    <DialogTitle>Definir ponto inicial da rota</DialogTitle>
                    <DialogDescription>
                      Digite um endereço completo ou selecione sua localização atual para iniciar a rota
                    </DialogDescription>
                  </DialogHeader>
                  <div className="py-4">
                    <div className="space-y-4">
                      <div>
                        <label htmlFor="custom-address" className="text-sm font-medium mb-1 block">
                          Digite um endereço
                        </label>
                        <div className="relative">
                          <Input
                            id="custom-address"
                            placeholder="Ex: Av. João Pessoa, 123, São Leopoldo, RS"
                            value={tempLocationAddress}
                            onChange={(e) => setTempLocationAddress(e.target.value)}
                            className="pr-10"
                          />
                          {tempLocationAddress && (
                            <button 
                              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                              onClick={() => setTempLocationAddress("")}
                              type="button"
                            >
                              <X className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                      </div>
                      
                      {customStartLocation && (
                        <div className="text-sm mt-2 bg-blue-50 p-3 rounded">
                          <p className="font-medium text-blue-700">Localização atual:</p>
                          <p className="text-blue-900">{customLocationAddress}</p>
                          <div className="text-xs text-blue-700 mt-1">
                            Coordenadas: {customStartLocation.lat.toFixed(5)}, {customStartLocation.lng.toFixed(5)}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                  <DialogFooter className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                    {currentGpsLocation && (
                      <Button 
                        variant="outline" 
                        className="w-full sm:w-auto flex-1"
                        onClick={handleUseCurrentLocation}
                      >
                        <MapPin className="w-4 h-4 mr-2" /> Usar GPS
                      </Button>
                    )}
                    <Button 
                      className="w-full sm:w-auto flex-1"
                      onClick={handleCustomLocationSearch}
                      disabled={isSearchingLocation || !tempLocationAddress.trim()}
                    >
                      {isSearchingLocation ? (
                        <>Buscando...</>
                      ) : (
                        <>
                          <MapIcon className="w-4 h-4 mr-2" /> Buscar endereço
                        </>
                      )}
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
              
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleRecalculateRoutes}
                disabled={!currentLocation || isLoading}
                className="text-xs"
              >
                <RotateCw className="w-3 h-3 mr-1" /> Recalcular
              </Button>
            </div>
          </div>
          
          <div className="flex flex-col gap-3">
            {customStartLocation && (
              <div className="bg-blue-50 p-2 rounded text-xs flex justify-between items-center">
                <div>
                  <span className="font-semibold text-blue-800">Partindo de:</span> 
                  <span className="text-blue-700"> {customLocationAddress}</span>
                </div>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="h-6 px-2 text-blue-700 hover:text-blue-900"
                  onClick={handleUseCurrentLocation}
                >
                  Voltar para GPS
                </Button>
              </div>
            )}
          
            <div className="flex items-center space-x-2">
              <Switch
                id="optimized-route"
                checked={showOptimizedRoute}
                onCheckedChange={setShowOptimizedRoute}
              />
              <Label htmlFor="optimized-route">Mostrar rota otimizada</Label>
            </div>
            
            <div className="flex items-center justify-between">
              <Button 
                variant="outline" 
                size="sm"
                onClick={async () => {
                  setIsLoading(true);
                  try {
                    await initializeDevDatabase();
                    toast({
                      title: 'Banco de dados reinicializado',
                      description: 'As visitas de teste em São Leopoldo foram adicionadas.',
                    });
                    window.location.reload(); // Recarregar a página para mostrar os novos dados
                  } catch (error) {
                    console.error('Erro ao reinicializar banco de dados:', error);
                    toast({
                      title: 'Erro ao reinicializar',
                      description: 'Não foi possível reinicializar o banco de dados.',
                      variant: 'destructive'
                    });
                  } finally {
                    setIsLoading(false);
                  }
                }}
                className="text-xs"
              >
                <Database className="w-3 h-3 mr-1" /> Reinicializar dados de teste
              </Button>
            </div>
          </div>
        </div>
        
        {/* Tabs para alternar entre mapa e lista */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="w-full grid grid-cols-2">
            <TabsTrigger value="mapa">Mapa</TabsTrigger>
            <TabsTrigger value="lista">Lista</TabsTrigger>
          </TabsList>
          
          {/* Conteúdo da tab Mapa */}
          <TabsContent value="mapa" className="mt-0">
            <div className="relative">
              <RouteMap
                visits={mapData}
                currentLocation={currentLocation || undefined}
                showRoutingMachine={!!selectedVisit && !!currentLocation}
                startCoordinate={currentLocation || undefined}
                endCoordinate={selectedVisit?.coordinates}
                className="h-[calc(100vh-360px)] md:h-[calc(100vh-320px)]"
              />
            </div>
            
            {/* Visita atualmente selecionada */}
            {selectedVisit && (
              <div className="p-4 bg-white shadow-md border-t">
                <div className="flex justify-between items-center">
                  <div>
                    <h3 className="font-medium">{selectedVisit.clientName}</h3>
                    <p className="text-sm text-gray-500">{selectedVisit.address}</p>
                  </div>
                  <div className="flex space-x-1">
                    <a 
                      href={gerarLinkGoogleMaps(selectedVisit.address)} 
                      target="_blank" 
                      rel="noopener noreferrer"
                    >
                      <Button size="sm" className="bg-blue-600 hover:bg-blue-700 text-white">
                        <MapPin className="h-4 w-4 mr-1" /> Google Maps
                      </Button>
                    </a>
                    <a 
                      href={gerarLinkWaze(selectedVisit.address)} 
                      target="_blank" 
                      rel="noopener noreferrer"
                    >
                      <Button size="sm" className="bg-sky-600 hover:bg-sky-700 text-white">
                        <Navigation className="h-4 w-4 mr-1" /> Waze
                      </Button>
                    </a>
                  </div>
                </div>
              </div>
            )}
          </TabsContent>
          
          {/* Conteúdo da tab Lista */}
          <TabsContent value="lista" className="mt-0 px-4 pt-2 pb-24">
            <div className="mb-4">
              {mapVisits.length > 1 && currentLocation && (
                <Card className="bg-blue-50 border-blue-200 mb-4">
                  <CardHeader className="py-3 px-4">
                    <div className="flex justify-between items-center">
                      <div>
                        <CardTitle className="text-base font-medium text-blue-800">Rota completa no Google Maps</CardTitle>
                        <CardDescription className="text-blue-700">
                          Ver rota completa com {mapVisits.length} paradas no Google Maps
                        </CardDescription>
                      </div>
                      <a 
                        href={gerarRotaCompletaGoogleMaps(
                          currentLocation, 
                          mapVisits.map(v => v.address)
                        )} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="flex items-center"
                      >
                        <Button size="sm" className="bg-blue-600 hover:bg-blue-700 shadow-sm font-medium">
                          <MapPin className="w-3 h-3 mr-1" /> Ver Rota Completa
                        </Button>
                      </a>
                    </div>
                  </CardHeader>
                  <div className="px-4 pb-3 pt-0">
                    <div className="text-xs text-blue-700 bg-blue-100 p-2 rounded">
                      <p><span className="font-medium">Dica:</span> Esta opção abre o Google Maps com todas as visitas em sequência otimizada para sua rota.</p>
                      <p className="mt-1">As paradas serão visitadas na ordem: {mapVisits.slice(0, 3).map((v, i) => i+1 + '. ' + v.clientName).join(', ')}{mapVisits.length > 3 ? '...' : ''}</p>
                    </div>
                  </div>
                </Card>
              )}
              
              <p className="text-sm text-gray-500 mb-3">
                {showOptimizedRoute 
                  ? 'Rota otimizada para minimizar tempo de deslocamento'
                  : 'Visitas ordenadas por ordem original'}
              </p>
            </div>
            
            {mapVisits.length === 0 ? (
              <Card>
                <CardHeader>
                  <CardTitle>Nenhuma visita agendada</CardTitle>
                  <CardDescription>
                    Não há visitas agendadas para hoje.
                  </CardDescription>
                </CardHeader>
              </Card>
            ) : (
              <div className="space-y-3">
                {mapVisits.map((visit, index) => (
                  <Card 
                    key={visit.id}
                    className={`hover:border-primary transition-colors ${selectedVisitId === visit.id ? 'border-primary' : ''}`}
                    onClick={() => setSelectedVisitId(visit.id)}
                  >
                    <CardHeader className="py-3 px-4">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-base font-medium">{visit.clientName}</CardTitle>
                          <CardDescription className="flex items-center mt-1">
                            <MapPin className="w-3 h-3 mr-1" /> {visit.address}
                          </CardDescription>
                        </div>
                        <div className="flex flex-col items-end">
                          <span className="text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded">
                            #{index + 1}
                          </span>
                          {showOptimizedRoute && index > 0 && (
                            <span className="text-xs text-gray-500 mt-1 flex items-center">
                              <Clock className="w-3 h-3 mr-1" /> {formatTimeEstimate(visit, index)}
                            </span>
                          )}
                        </div>
                      </div>
                    </CardHeader>
                    <CardFooter className="py-2 px-4 bg-gray-50 flex justify-between">
                      <span className="text-xs flex items-center">
                        <Calendar className="w-3 h-3 mr-1" /> {visit.date}
                        {visit.time && ` às ${visit.time}`}
                      </span>
                      <div className="flex items-center space-x-2">
                        <a 
                          href={gerarLinkGoogleMaps(visit.address)} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-xs bg-blue-600 text-white px-2 py-1 rounded flex items-center"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <MapPin className="w-4 h-4 mr-1" /> Google Maps
                        </a>
                        <a 
                          href={gerarLinkWaze(visit.address)} 
                          target="_blank" 
                          rel="noopener noreferrer"
                          className="text-xs bg-sky-600 text-white px-2 py-1 rounded flex items-center"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <Navigation className="w-4 h-4 mr-1" /> Waze
                        </a>
                      </div>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </PageTransition>
  );
};

export default RouteMapPage;